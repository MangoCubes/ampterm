:PROPERTIES:
:ID:       2c0d8ff0-5fb3-4eb1-a979-403c08867912
:END:
#+TITLE: Architecture
* Note
- This is mostly for me to keep my thoughts in order.
* Player Worker Management
** Queue Management
- Queue is stored as a VecDeque<Media>
- This queue does not delete any elements unless the user explicitly remove elements from it
- Current state contains the index of the music that is currently being played (Playing/Loading) or should be played when the play button is pressed (Idle) 
** State
- There are 3 states: Idle, Loading, and Playing
*** Idle
- This is where the player starts at when there is nothing being played
- This state contains an index named =play_next= which specifies what should be played in case the player is started
*** Loading
- When the player is started, we know the identifier of the song, but we do not know the exact location from which we can fetch the music
- This state represents this exact moment, and is expected to transition into Playing state almost immediately
- This state may be removed in the future where this is replaced with Playing state
*** Playing
- In this state, the music has been fetched from the URL and is now being played
** Action
- There are three actions, add to front, add next, and add last.
*** Add To Front
- Add an item so that the new one is played
- If music was being played, then that music is stopped and pushed next to the queue
*** Add Next
- Add an item so that once the current item finishes, the selected music is played
*** Add Last
- Add an item so that once everything in the queue (before adding the selected music) is exhausted, the selected music is played
** Action Handling
|              | Idle                                                                             | Loading / Playing                                      |
|--------------+----------------------------------------------------------------------------------+--------------------------------------------------------|
| Add To Front | Music is added so that once the user starts playing, the added music plays first | Stop the current loading, and play the requested music |
* General
** State Change Management
- Components may have state, and they are marked with Stateful trait
- Drawing should not change state
** Player State Changes
- There are three stages: Idle, Loading and Playing
*** Idle
- Idle -> Loading: When the user selects a music file, and it requires further processing to get the corresponding resource link
- Idle -> Playing: When the user selects a music file, and it does not require further processing because we already have the URL to fetch the music file from
*** Loading
- Loading -> Idle: Playing is cancelled, or the OSClient fails to fetch the link
- Loading -> Playing: The OSClient successfully fetches the link
*** Playing
- Playing -> Idle: Music playing is stopped, or the current music is skipped and the queue is empty
- Playing -> Loading: Current music is skipped and the queue is not empty


